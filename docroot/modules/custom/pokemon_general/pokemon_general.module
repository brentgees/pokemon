<?php

/**
 * @file
 * Contains pokemon_general.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\pokemon_general\Entity\AttackEntity;
use Pokemon\Models\Attack;

/**
 * Implements hook_help().
 */
function pokemon_general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pokemon_general module.
    case 'help.page.pokemon_general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('General module for pokemon') . '</p>';
      return $output;

    default:
  }
}

/**
 * Checks if the attack already exists.
 *
 * @param \Pokemon\Models\Attack $attack
 *   The attack entity.
 *
 * @return int
 *   Returns the id of the attack or -1.
 */
function pokemon_general_check_if_attack_exists(Attack $attack) {

  $query = \Drupal::database()->select('attack_entity__field_attack_name', 'atn');
  $query->fields('atn', ['entity_id']);
  $query->condition('bundle', 'attack_entity');
  $query->condition('field_attack_name_value', $attack->getName());

  $result = $query->execute()->fetchCol();

  // First check the name.
  if (!empty($result)) {
    $attacks = AttackEntity::loadMultiple($result);
    foreach ($attacks as $attack_node) {
      $attack_text_same = $attack->getText() == $attack_node->get('field_attack_text')->getValue() ? TRUE : FALSE;
      $attack_damage_same = $attack->getDamage() == $attack_node->get('field_attack_damage')->getValue() ? TRUE : FALSE;
      $attack_converted_ec_same = $attack->getConvertedEnergyCost() == $attack_node->get('field_attack_converted_ec')->getValue() ? TRUE : FALSE;
      // We assume the cost is the same for now.
      // $attack_cost_same = TRUE;
      // foreach ($attack_node->get('field_attack_cost')->getValue() as $attack_cost) {
      // $tmp = '';
      // }
      if ($attack_text_same && $attack_damage_same && $attack_converted_ec_same) {
        return $attack_node->id();
      }
    }
  }
  return -1;
}
